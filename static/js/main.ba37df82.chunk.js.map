{"version":3,"sources":["CycleSpan.js","poemfiles/theveil.js","poemfiles/poem1.js","poemfiles/poem2.js","poemfiles/poem3.js","introPage.js","App.js","serviceWorker.js","index.js"],"names":["CycleSpan","props","useState","count","setCount","className","onClick","entrySize","entries","length","divisor","TheVeil","Poem1","to","IntroPage","App","path","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"iPAmBeA,MAjBf,SAAmBC,GAAQ,IAAD,EACEC,mBAAS,GADX,mBACjBC,EADiB,KACVC,EADU,KAYtB,OACI,0BAAMC,UAAW,YAAaC,QAVhB,WACd,IAAIC,EAAYN,EAAMO,QAAQC,OAC1BC,EAAUP,EAAQI,EAAW,EAC9BG,IAAYH,IACXG,EAAQ,GAEZN,EAASM,KAI4CT,EAAMO,QAAQL,KCwB5DQ,MApCf,WACC,OACC,yBAAKN,UAAW,WAChB,wCACA,mDACsB,6BADtB,oCAEkC,6BAChC,6BAHF,WAIS,6BAJT,wBAKsB,6BACrB,6BAND,2CAOyC,6BAPzC,kCAQgC,6BARhC,SASO,6BATP,yBAUuB,6BAVvB,OAWK,kBAAC,EAAD,CAAWG,QAAS,CAAC,iBAAiB,cAAc,cAAc,YAAY,gBAXnF,eAW+G,6BAC9G,kBAAC,EAAD,CAAWA,QAAS,CAAC,uBACrB,0BACA,sDAAsD,6BAdvD,+BAe6B,6BAC5B,6BAhBD,kCAiBgC,6BAjBhC,wBAkBsB,6BACrB,kBAAC,EAAD,CAAWA,QAAS,CAAC,qCACrB,sCACA,+CAA+C,6BAC/C,6BAtBD,kCAuBgC,6BAC/B,6BACA,qEAA0C,6BAA1C,+BAC4B,iC,OCVhBI,MAnBf,WACQ,OACA,yBAAKP,UAAW,SAAhB,iBAEI,kBAAC,IAAD,CAAMQ,GAAI,UACN,2DAIJ,uBAAGR,UAAW,aAAd,wBACyB,kBAAC,EAAD,CAAWG,QAAS,CAAC,MAAO,SAAS,MAAO,WAErE,6DACmC,kBAAC,EAAD,CAAWA,QAAS,CAAC,MAAO,SAAS,MAAO,aCD5EI,MAbf,WACI,OACI,yBAAKP,UAAU,SAAf,iBAEI,kBAAC,IAAD,CAAMQ,GAAI,UACN,6DCQDD,MAbf,WACI,OACI,8CAEI,kBAAC,IAAD,CAAMC,GAAI,KACN,gECEDC,MARf,WACQ,OACA,uD,OC8BOC,MAxBf,WACI,OACI,yBAAKV,UAAU,OACX,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAOW,KAAM,YACT,kBAAC,EAAD,OAEJ,kBAAC,IAAD,CAAOA,KAAM,UACT,kBAAC,EAAD,OAEJ,kBAAC,IAAD,CAAOA,KAAM,UACT,kBAAC,EAAD,OAEJ,kBAAC,IAAD,CAAOA,KAAM,UACT,kBAAC,EAAD,OAEJ,kBAAC,IAAD,CAAOA,KAAM,KACT,kBAAC,EAAD,UCfAC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OACL,kBAAC,IAAD,KACI,kBAAC,EAAD,OAEJC,SAASC,eAAe,SDsHtB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.ba37df82.chunk.js","sourcesContent":["import React, {useState} from 'react'\r\n\r\nfunction CycleSpan(props) {\r\n    let [count, setCount] = useState(0);\r\n\r\n    let handleClick = () => {\r\n        let entrySize = props.entries.length ;\r\n        let divisor = count % entrySize +1;\r\n        if(divisor === entrySize){\r\n            divisor=0\r\n        }\r\n        setCount(divisor);\r\n    };\r\n\r\n    return (\r\n        <span className={\"cycleSpan\"} onClick={handleClick}>{props.entries[count]}</span>\r\n    )\r\n}\r\n\r\nexport default CycleSpan","import React from 'react'\r\nimport CycleSpan from \"../CycleSpan\";\r\n\r\nfunction TheVeil() {\r\n\treturn (\r\n\t\t<div className={'theveil'}>\r\n\t\t<h2>The Veil</h2>\r\n\t\t<p>\r\n\t\t\tFather, Odysseus lies<br/>\r\n\t\t\tconcealed at the end of the world<br/>\r\n \t\t\t<br/>\r\n\t\t\tshrouded<br/>\r\n\t\t\tseeking to live again<br/>\r\n\t\t\t<br/>\r\n\t\t\tBut in the dark at the dawn of the world<br/>\r\n\t\t\tthe archaism of the gilt prison<br/>\r\n\t\t\tOgygia<br/>\r\n\t\t\tthe Veil clings to him<br/>\r\n\t\t\tthe <CycleSpan entries={[\"various-minded\",\"resourceful\",\"complicated\",\"ingenious\",\"polytropic\"]}/> peripatetic<br/>\r\n\t\t\t<CycleSpan entries={[\"two decades in tears\",\r\n\t\t\t\"two decades in solitude\",\r\n\t\t\t\"facing five more decades of the last two decades\"]}/><br/>\r\n\t\t\tlike night clings to shadows<br/>\r\n\t\t\t<br/>\r\n\t\t\tFather, extinguish the darkness<br/>\r\n\t\t\tsend him uncovered to<br/>\r\n\t\t\t<CycleSpan entries={[\"Penelope, who kneels to blind gods\",\r\n\t\t\t\"Telemachos, whose father is absence\",\r\n\t\t\t\"Argos, who lives with wretched resolution\"]}/><br/>\r\n\t\t\t<br/>\r\n\t\t\tIthaki lacks its brightest star<br/>\r\n\t\t\t<br/>\r\n\t\t\t<i>The Daughter of Endurance will give in:<br/>\r\n\t\t\tOdysseus' voyage must begin.<br/></i> \r\n\t\t</p>\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\nexport default TheVeil","import React from 'react'\r\nimport CycleSpan from \"../CycleSpan\";\r\nimport {Link} from 'react-router-dom'\r\n\r\nfunction Poem1() {\r\n        return (\r\n        <div className={\"poem1\"}>\r\n            this is poem 1\r\n            <Link to={\"/poem2\"}>\r\n                <button>\r\n                    this will go to poem 2\r\n                </button>\r\n            </Link>\r\n            <p className={\"paragraph\"}>\r\n                this is a Cycle span <CycleSpan entries={[\"red\", \"carrot\",\"ben\", \"tank\"]}/>\r\n            </p>\r\n            <p>\r\n                this is a brand new cycle span <CycleSpan entries={[\"red\", \"carrot\",\"ben\", \"tank\"]}/>\r\n            </p>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Poem1","import React from 'react'\r\nimport {Link} from \"react-router-dom\";\r\n\r\nfunction Poem1() {\r\n    return(\r\n        <div className=\"poem2\">\r\n            this is poem 2\r\n            <Link to={'/poem3'}>\r\n                <button>\r\n                    this will go to poem 3\r\n                </button>\r\n            </Link>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Poem1","import React from 'react'\r\nimport {Link} from \"react-router-dom\";\r\n\r\nfunction Poem1() {\r\n    return(\r\n        <div>\r\n            this is poem 3\r\n            <Link to={'/'}>\r\n                <button>\r\n                    This will go to home page\r\n                </button>\r\n            </Link>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Poem1","import React from 'react'\r\n\r\nfunction IntroPage() {\r\n        return (\r\n        <div>\r\n            this is the intropage\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default IntroPage","import React from 'react';\r\nimport './App.css';\r\nimport TheVeil from './poemfiles/theveil';\r\nimport Poem1 from './poemfiles/poem1';\r\nimport Poem2 from './poemfiles/poem2';\r\nimport Poem3 from './poemfiles/poem3';\r\nimport IntroPage from \"./introPage\";\r\nimport {Switch, Route} from 'react-router-dom'\r\n\r\n\r\nfunction App() {\r\n    return (\r\n        <div className=\"App\">\r\n            <Switch>\r\n                <Route path={'/theveil'}>\r\n                    <TheVeil/>\r\n                </Route>                \r\n                <Route path={'/poem2'}>\r\n                    <Poem2/>\r\n                </Route>\r\n                <Route path={'/poem3'}>\r\n                    <Poem3/>\r\n                </Route>\r\n                <Route path={'/poem1'}>\r\n                    <Poem1/>\r\n                </Route>\r\n                <Route path={'/'}>\r\n                    <IntroPage/>\r\n                </Route>\r\n            </Switch>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport {HashRouter} from \"react-router-dom\";\r\n\r\nReactDOM.render(\r\n    <HashRouter>\r\n        <App/>\r\n    </HashRouter>,\r\n    document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}